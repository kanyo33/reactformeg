{"version":3,"sources":["ContactForm.js","index.js"],"names":["ContactForm","state","name","email","phone","picture","formErrors","errorMessages","tfHandler","evt","_this$setState","_evt$target","target","value","_this","length","match","setState","Object","defineProperty","validateForm","valid","values","forEach","err","submitHandler","preventDefault","alert","map","index","react_default","a","createElement","key","className","onSubmit","this","htmlFor","onChange","type","JSON","stringify","Component","App","src_ContactForm","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.30c46dd9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ContactForm extends Component {\n\n    state = {\n        name: '',\n        email: '',\n        phone: '',\n        picture: '',\n        formErrors: {\n            name: 'Name is required',\n            email: 'Email is required',\n            phone: 'Phone is required'\n        },\n        errorMessages: null\n    }\n\n    tfHandler = (evt) => {\n        let { name, value } = evt.target;\n        let { formErrors } = this.state;\n\n        switch (name) {\n            case 'name':\n                if (!value || value.length === 0) {\n                    formErrors.name = 'Name is required';\n                }\n                else if (value.length < 3 || value.length > 20) {\n                    formErrors.name = 'Name must be between 3 to 20 letters';\n                }\n                else {\n                    formErrors.name = '';\n                }\n                break;\n            case 'email':\n                if (!value || value.length === 0) {\n                    formErrors.email = 'Email is required';\n                }\n                else if (!value.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i)) {\n                    formErrors.email = 'Not a valid email';\n                }\n                else {\n                    formErrors.email = '';\n                }\n                break;\n            case 'phone':\n                if (!value || value.length === 0) {\n                    formErrors.phone = 'Phone is required';\n                }\n                else if (!value.match(/^\\d{10,12}$/)) {\n                    formErrors.phone = 'Not a valid phone';\n                }\n                else {\n                    formErrors.phone = '';\n                }\n                break;\n            default:\n                break;\n        }\n\n\n        this.setState({ [name]: value, formErrors });\n    }\n\n\n    validateForm = (formErrors) => {\n        let valid = true;\n        Object.values(formErrors).forEach(err => valid = valid && err.length === 0)\n        return valid;\n    }\n\n    submitHandler = (evt) => {\n        evt.preventDefault();\n\n        let { formErrors } = this.state;\n\n        if (this.validateForm(formErrors)) {\n            alert('All is well!');\n        }\n\n        let errorMessages = Object.values(formErrors).map((err, index) => err.length === 0 ? null : <li key={index}>{err}</li>)\n        this.setState({ errorMessages });\n    }\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col\">\n                    <div>\n                        <h3>Add a new contact</h3>\n                        <form className=\"form\" onSubmit={this.submitHandler}>\n                            <div className=\"form-group row\">\n                                <label htmlFor=\"\" className=\"control-label col-md-4\">\n                                    Name\n                        </label>\n                                <div className=\"col-md-8\">\n                                    <input value={this.state.name} onChange={this.tfHandler} name=\"name\" type=\"text\" className=\"form-control\" />\n                                </div>\n                            </div>\n                            <div className=\"form-group row\">\n                                <label htmlFor=\"\" className=\"control-label col-md-4\">\n                                    Email address\n                        </label>\n                                <div className=\"col-md-8\">\n                                    <input value={this.state.email} onChange={this.tfHandler} name=\"email\" type=\"text\" className=\"form-control\" />\n                                </div>\n                            </div>\n                            <div className=\"form-group row\">\n                                <label htmlFor=\"\" className=\"control-label col-md-4\">\n                                    Phone number\n                        </label>\n                                <div className=\"col-md-8\">\n                                    <input value={this.state.phone} onChange={this.tfHandler} name=\"phone\" type=\"text\" className=\"form-control\" />\n                                </div>\n                            </div>\n                            <div className=\"form-group row\">\n                                <label htmlFor=\"\" className=\"control-label col-md-4\">\n                                    Picture\n                        </label>\n                                <div className=\"col-md-8\">\n                                    <input value={this.state.picture} onChange={this.tfHandler} name=\"picture\" type=\"text\" className=\"form-control\" />\n                                </div>\n                            </div>\n                            <button className=\"btn btn-primary\">Save data</button>\n                        </form>\n                        <ul>\n                            {this.state.errorMessages}\n                        </ul>\n                    </div>\n                </div>\n                <div className=\"col\">\n                    <h3>Current state: </h3>\n                    <pre>{JSON.stringify(this.state, null, 3)}</pre>\n                </div>\n            </div>\n\n        );\n    }   \n}\n\nContactForm.propTypes = {\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    phone: PropTypes.bool,\n    picture: PropTypes.object,\n  };\n\nexport default ContactForm;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport ContactForm from './ContactForm';\n\nclass App extends Component {\n\n    render() {\n        return (<div className=\"container\">\n            <h1 className=\"alert alert-info\">Example Form</h1>\n            <ContactForm />\n        </div>);\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}